package creek.student.finalproject;

import android.annotation.SuppressLint;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintSet;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableRow;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 */
public class FullscreenActivity extends AppCompatActivity {

    private Handler mHandler;
    private int level = 1;
    private int margin = 93 ;int row = 2131165323;
    private int count = 0;
    private int one = 1;
    private ConstraintLayout view;
    private ConstraintLayout constraintLayout;
    private boolean isPlaying;
    private ArrayList<Block> blocks = new ArrayList<Block>();
    private static boolean goingUp = true;

    public static boolean isGoingUp(){
        return goingUp;
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_fullscreen);
        ActionBar actionBar = getSupportActionBar();
        actionBar.hide();
        view = (findViewById(R.id.tableRow1));
        constraintLayout = findViewById(R.id.constraintLayout8);
        mHandler = new Handler();
        start();
    }

    Runnable mStatusChecker = new Runnable() {
        @Override
        public void run() {
            try {
                move();
                count++;
            } finally {
                if (count >= 286 * 5 + 50 + 93) stop();
                else mHandler.postDelayed(mStatusChecker, 10);
            }
        }
    };

    void start() {
        mStatusChecker.run();
    }

    void stop() {
        mHandler.removeCallbacks(mStatusChecker);
    }

    private void move() {
        if(margin == 0 && row == R.id.tableRow5 && goingUp)
            goingUp = false;

        if(margin == 0 && goingUp){
            margin = 286;
            view = findViewById(row);
            row = row + 1;
            Log.i("BLAH", "FUCKING WORK ALREADY PLEASE" + row);
        }

        if(margin == 10 && !goingUp){
            margin = 0;
            view = findViewById(row);
            row = row - 1;
            Log.i("BLAH", "FUCKING WORK ALREADY PLEASE GOING DOWN" + row);
        }

        if(goingUp)
            changeConstraint(R.id.constraintLayout8);
        if(!goingUp)
            changeConstraint(row - 1);
    }

    private void changeConstraint(int connection){
        if(goingUp)
            margin--;
        if(!goingUp)
            margin++;
        ConstraintSet constraintSet = new ConstraintSet();
        constraintSet.clone(constraintLayout);
        if(goingUp)
            constraintSet.connect(row, ConstraintSet.TOP, R.id.constraintLayout8, ConstraintSet.TOP, margin);
        else
            constraintSet.connect(row, ConstraintSet.BOTTOM, connection, ConstraintSet.TOP, margin);
        constraintSet.applyTo(constraintLayout);
        //Log.i("Row", "" + margin);
    }
}


        Rect rc1 = new Rect();
        Rect rc2 = new Rect();
        ImageView drill = image.getImageView();
        ImageView block = b.getImage();
        Imaz
        rc1.left = drill.getLeft();
        rc1.top = drill.getTop();
        rc1.bottom = drill.getBottom();
        rc1.right = drill.getRight();
        rc2.left = block.getLeft();
        rc2.top = block.getTop();
        rc2.bottom = block.getBottom();
        rc2.right = block.getRight();